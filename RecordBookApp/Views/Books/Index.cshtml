@model IEnumerable<RecordBookApp.Models.BookView>

@{
    ViewData["Title"] = "Index";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">

    <style>
        html, body {
            height: 100%;
            background-color: #f8f9fa;
            font-family: 'Montserrat', sans-serif;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .main-content {
            padding: 20px;
            max-width: 91%;
            margin-left: 180px; /* Adjusted for sidebar width */
            box-sizing: border-box;
        }

        .btn-primary, .btn-light {
            box-shadow: none;
        }

        .search-container {
            align-items: center;
            justify-content: space-between; /* Ensure space between search and add new book */
            margin-bottom: 20px;
            max-width: 100%;
            margin-top: 20px;
        }

        .search-container .form-control {
            max-width: 500px; /* Example width, adjust as necessary */
            margin-right: 10px; /* Adjust the gap between input and search icon */
            font-size: 16px; /* Adjust the font size of the placeholder */
            width: 350px;
        }

        .search-container select {
            margin-left: 10px; /* Adjust the gap between search input and filter */
            max-width: 100px; /* Example width, adjust as necessary */
            font-size: 16px; /* Adjust the font size of the placeholder */
        }

        .search-container button {
            padding: 6px 10px; /* Example padding, adjust as necessary */
            width:200px;
        }

        .book-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .book-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            margin-bottom: 10px;
            transition: background-color 0.3s;
            cursor: pointer;
            border-bottom: 1px solid #dee2e6; /* Add a bottom border */
        }

        .book-item:hover {
            background-color: #e9ecef;
        }

        .book-item .book-info {
            display: flex;
            align-items: center;
        }

        .book-item .book-info i {
            font-size: 18px;
            margin-right: 8px;
        }

        .book-item .book-info span {
            font-size: 16px;
        }

        .book-item .book-info .text-muted {
            font-size: small;
        }


        .book-item .book-actions {
            display: none;
            align-items: center;
            margin-right: 15px;
         }

        .book-item:hover .book-actions {
            display: flex;
        }

        .book-item .book-actions .edit-btn {
            color: midnightblue;
            margin-right: 5px;
            font-size: 19px;
        }

        .book-item .book-actions .delete-btn {
            color: red;
            font-size: 19px;
        }

        .balance {
            font-weight: bold;
        }

        .balance.positive {
            color: green;
        }

        .balance.negative {
            color: red;
        }

        .table-responsive {
            margin-top: 10px;
        }

        .sidebar {
            position: fixed;
            top: 50px; /* Adjusted to not overlap navbar */
            bottom: 0;
            left: 0;
            width: 250px;
            background-color: #002244;
            color: white;
            padding: 20px;
            overflow-y: auto;
        }

        .sidebar .nav-link:hover {
            background-color: transparent; /* Set background to transparent */
            font-weight: bold; /* Example: increase font weight */
            color: #ffffff;
        }

        .sidebar .sidebar-header {
            font-size: 1rem;
            margin-bottom: 20px;
        }

        .sidebar .nav-item i {
            margin-right: 10px;
        }

        h4 {
            font-weight: bolder;
        }

        .modal-dialog-zoom {
            transform: scale(0.5); /* Start with smaller scale */
            transition: transform 0.1s ease-out; /* Smooth transition */
        }

        .modal.show .modal-dialog-zoom {
            transform: scale(1); /* Scale up to 1 */
        }

        .modal-custom-width {
            max-width: 550px; /* Adjust as needed */
        }

    </style>
</head>
<body>
    <div class="sidebar">
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-plus-circle"></i>
                    Add New Business
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-cash"></i>
                    Cashbooks
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">
                    <i class="bi bi-gear"></i>
                    Business Settings
                </a>
            </li>
        </ul>
    </div>

    <div class="container main-content">
        <h4>Janak Makadia's Business</h4>
        <div class="search-container d-flex justify-content-between align-items-center">
            <div class="d-flex">
                <form id="searchForm">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by book name... ">
                </form>                
                <select class="form-select">
                    <option selected>All</option>
                    <option value="1">Filter 1</option>
                    <option value="2">Filter 2</option>
                    <option value="3">Filter 3</option>
                </select>
            </div>
            <button id="createBookButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createBookModal">
                <i class="fas fa-plus"></i> Add New Book
            </button>
        </div>

        <ul class="book-list">
            @foreach (var item in Model)
            {
                <li class="book-item" data-book-id="@item.BookId" data-book-name="@item.BookName">
                    <div class="book-info">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-journal-bookmark-fill" style="padding-right:12px;"></i>
                            <div>
                                <span><b>@Html.DisplayFor(modelItem => item.BookName)</b></span>
                                <div class="text-muted created-updated-time" data-created-at="@item.CreatedAt" data-updated-at="@item.UpdatedAt">
                                    @(item.UpdatedAt.HasValue ? "Updated " : "Created ") <span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex align-items-center">
                        <div class="book-actions">
                            <!-- Use data-bs-toggle and data-bs-target for modal trigger -->
                            <button class="btn btn-sm edit-btn" data-bs-toggle="modal" data-bs-target="#editBookModal">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm delete-btn deleteBookButton" data-bs-toggle="modal" data-bs-target="#deleteBookModal">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                        <div class="balance @(item.NetBalance >= 0 ? "positive" : "negative")">
                            @(item.NetBalance >= 0 ? item.NetBalance.ToString("N2") : item.NetBalance.ToString("N2"))
                        </div>
                    </div>
                </li>
            }
    </ul>
 </div>

    <div class="modal" id="createBookModal" tabindex="-1" aria-labelledby="createBookModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-zoom modal-custom-width">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createBookModalLabel"><b>Add New Book</b></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createBookForm">
                        <!-- Form content will be loaded via AJAX -->
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="submitCreateBookForm">Create</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="deleteBookModal" tabindex="-1" aria-labelledby="deleteBookModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-zoom modal-custom-width">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteBookModalLabel"><b>Delete Book</b></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="deleteBookForm">
                        <!-- Form content will be loaded via AJAX -->
                    </form>
                    <input type="hidden" id="deleteBookId" name="BookId" value="" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="submitDeleteBookForm"> <i class="bi bi-trash"></i>  Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
        <script>
            $(document).ready(function () {
                $('#createBookButton').click(function () {
                    $.ajax({
                        url: '@Url.Action("Create", "Books")',
                        type: 'GET',
                        success: function (response) {
                            $('#createBookForm').html(response);
                            $('#createBookModal').modal('show');

                            // Set focus and cursor position at the beginning of #BookName input
                            setTimeout(function () {
                                $('#BookName').focus();
                                $('#BookName')[0].setSelectionRange(0, 0);
                            }, 0);
                        },
                        error: function () {
                            alert('Error loading form');
                        }
                    });
                });

                function submitCreateBookForm() {
                    var form = $('#createBookForm');
                    $.ajax({
                        url: '@Url.Action("Create", "Books")',
                        type: 'POST',
                        data: form.serialize(),
                        success: function (response) {
                            if (response.success) {
                                $('#createBookModal').modal('hide');
                                toastr.success('Book added successfully!', 'Success', {
                                    positionClass: 'toast-bottom-right'
                                });
                                setTimeout(function () {
                                    location.reload();
                                }, 500);
                            } else {
                                $('#createBookForm').html(response);
                                var errorMessage = "Please provide a valid name for the book (e.g. Daily Expense, Bills etc.)!";
                                $('#createBookForm .invalid-feedback').html(errorMessage);
                            }
                        },
                        error: function () {
                            alert('Error submitting form');
                        }
                    });
                }

                $('#submitCreateBookForm').click(function () {
                    submitCreateBookForm();
                });

                $('#createBookModal').on('keypress', function (e) {
                    if (e.which == 13) {
                        e.preventDefault();
                        submitCreateBookForm();
                    }
                });

                $('#createBookModal').on('shown.bs.modal', function () {
                    $('#BookName').focus();
                    $('#BookName')[0].setSelectionRange(0, 0);
                });

                $(document).on('click', '.deleteBookButton', function () {
                    var bookId = $(this).closest('.book-item').data('book-id');

                    $('#deleteBookId').val(bookId);

                    // Show the delete confirmation modal
                    $('#deleteBookModal').modal('show');

                    // Load the delete form via AJAX
                    $.ajax({
                        url: '@Url.Action("Delete", "Books")' + '/' + bookId,
                        type: 'GET',
                        success: function (response) {
                            $('#deleteBookForm').html(response);
                            $('#deleteBookModal').modal('show');

                            setTimeout(function () {
                                $('#confirmBookName').focus();
                                $('#confirmBookName')[0].setSelectionRange(0, 0);
                            }, 0);
                        },
                        error: function () {
                            alert('Error loading form');
                        }
                    });
                });


                function submitDeleteBookForm() {
                    var form = $('#deleteBookForm');
                    var formData = form.serialize() + '&BookId=' + $('#deleteBookId').val();

                    var confirmBookName = $('#confirmBookName').val().trim();
                    var actualBookName = $('.book-item[data-book-id="' + $('#deleteBookId').val() + '"]').data('book-name');

                    console.log("FormData:", formData); // Debugging

                    console.log(actualBookName);
                    console.log(confirmBookName);

                    if (confirmBookName === actualBookName) {
                        $.ajax({
                            url: '@Url.Action("DeleteBook", "Books")',
                            type: 'POST',
                            data: formData,
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (response) {
                                if (response.success) {
                                    $('#deleteBookModal').modal('hide');
                                    toastr.success('Book deleted successfully!', 'Success', {
                                        positionClass: 'toast-bottom-right'
                                    });
                                    setTimeout(function () {
                                        location.reload();
                                    }, 500);
                                } else {
                                    $('#deleteBookForm').html(response);
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error(xhr.responseText); // Log full error message
                                alert('Error submitting form: ' + error);
                            }
                        });
                    } else {
                        var errorMessage = "Book Name doesn't match. Please type " + actualBookName + " in the required field to confirm.";
                        $('#confirmBookNameError').text(errorMessage).addClass('error-message');
                    }
                }


                $('#submitDeleteBookForm').click(function () {
                    submitDeleteBookForm();
                });

                $('#deleteBookModal').on('keypress', function (e) {
                    if (e.which == 13) {
                        e.preventDefault();
                        submitDeleteBookForm();
                    }
                });

                $('#deleteBookModal').on('shown.bs.modal', function () {
                    $('#confirmBookName').focus();
                    $('#confirmBookName')[0].setSelectionRange(0, 0);
                });

                // Function to handle search filtering
                var timeoutId = null;
                $('#searchInput').keyup(function () {
                    clearTimeout(timeoutId); // Clear previous timeout
                    timeoutId = setTimeout(function () {
                        var searchString = $('#searchInput').val().trim();

                        $.ajax({
                            url: '@Url.Action("Index", "Books")',
                            type: 'GET',
                            data: { searchString: searchString },
                            dataType: 'json', // Specify JSON data type
                            success: function (response) {
                                // Clear previous book list content
                                $('.book-list').empty();

                                // Check if response is not empty
                                if (response.length > 0) {
                                    // Iterate through each book in response and append to book list
                                    $.each(response, function (index, book) {
                                        var createdAt = moment(book.createdAt);
                                        var updatedAt = book.updatedAt ? moment(book.updatedAt) : null;
                                        var now = moment();
                                        var relativeTime;

                                        if (updatedAt && updatedAt.isAfter(createdAt)) {
                                            relativeTime = updatedAt.fromNow();
                                        } else {
                                            relativeTime = createdAt.fromNow();
                                        }

                                        // Construct the HTML for the book item with relative time
                                        var bookItem = `
                                                <li class="book-item" data-book-id="${book.bookId}" data-book-name="${book.bookName}">
                                                    <div class="book-info">
                                                        <div class="d-flex align-items-center">
                                                            <i class="bi bi-journal-bookmark-fill" style="padding-right:12px;"></i>
                                                            <div>
                                                                <span><b>${book.bookName}</b></span>
                                                                <div class="text-muted created-updated-time" data-created-at="${book.createdAt}" data-updated-at="${book.updatedAt}">
                                                                    ${book.updatedAt ? 'Updated ' : 'Created '} ${relativeTime}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex align-items-center">
                                                        <div class="book-actions">
                                                            <button class="btn btn-sm edit-btn" data-bs-toggle="modal" data-bs-target="#editBookModal">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-sm delete-btn deleteBookButton" data-bs-toggle="modal" data-bs-target="#deleteBookModal">
                                                                <i class="fas fa-trash-alt"></i>
                                                            </button>
                                                        </div>
                                                        <div class="balance ${book.netBalance >= 0 ? 'positive' : 'negative'}">
                                                            ${book.netBalance.toFixed(2)}
                                                        </div>
                                                    </div>
                                                </li>`;

                                        // Append the book item HTML to the book-list
                                        $('.book-list').append(bookItem);
                                    });
                                } else {
                                    // Display message if no books found
                                    $('.book-list').html('<div class="text-center">No books found.</div>');
                                }

                            },
                            error: function () {
                                alert('Error searching books');
                            }
                        });
                    }, 0); // Delay in milliseconds before making the AJAX call
                });

                $('.book-item').dblclick(function () {
                    var bookId = $(this).data('book-id');
                    window.location.href = '@Url.Action("BookIdretrieval", "Books")' + '/' + bookId;
                });

                $('.book-item').hover(
                    function () {
                        $(this).find('.book-actions').show();
                    },
                    function () {
                        $(this).find('.book-actions').hide();
                    }
                );

                $('.created-updated-time').each(function () {
                    var createdAt = moment($(this).data('created-at'));
                    var updatedAt = moment($(this).data('updated-at'));
                    var now = moment();
                    var relativeTime;

                    if (updatedAt.isValid() && updatedAt.isAfter(createdAt)) {
                        relativeTime = updatedAt.fromNow();
                        $(this).text('Updated ' + relativeTime);
                    } else {
                        relativeTime = createdAt.fromNow();
                        $(this).text('Created ' + relativeTime);
                    }
                });
            });
        </script>
    }
</body>
</html>
