// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RecordBookApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240823090537_PartyAdd")]
    partial class PartyAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecordBookApp.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("RecordBookApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Salary",
                            Type = "CashIn"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Bonus",
                            Type = "CashIn"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Income from Rent",
                            Type = "CashIn"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Businesss Profit",
                            Type = "CashIn"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Other",
                            Type = "CashIn"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Stock Market",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Grocery",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Bills",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Health",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Fuel",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Rent",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Maintenance",
                            Type = "CashOut"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Labour Charges",
                            Type = "CashOut"
                        });
                });

            modelBuilder.Entity("RecordBookApp.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            Type = "Online/UPI/Net Banking"
                        },
                        new
                        {
                            PaymentId = 2,
                            Type = "Offline/Cash"
                        });
                });

            modelBuilder.Entity("RecordBookApp.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("RecordId");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("RecordBookApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecordBookApp.Models.Book", b =>
                {
                    b.HasOne("RecordBookApp.Models.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecordBookApp.Models.Record", b =>
                {
                    b.HasOne("RecordBookApp.Models.Book", "Book")
                        .WithMany("Records")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordBookApp.Models.Category", "Category")
                        .WithMany("Records")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordBookApp.Models.Payment", "Payment")
                        .WithMany("Records")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("RecordBookApp.Models.Book", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("RecordBookApp.Models.Category", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("RecordBookApp.Models.Payment", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("RecordBookApp.Models.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
